[{"content":"人工智能|从部署开源模型Llama2认识机器学习 引言 Llama2是Meta AI开源的大模型。截止目前，它算是比较好的开源大模型。\n但是，从部署的效果来看，比ChatGPT的推理能力、写作能力还有一些小差距。\n部署后的试用效果：\n以上只是我个人短暂试用的结果, 你可以在完成部署后使用自己的测试会话来测试Llama2。\nLlama2 Chinese 模型介绍 Llama中文社区是一个专注于Llama模型在中文方面的优化和上层建设的高级技术社区。 基于大规模中文数据，从预训练开始对Llama2模型进行中文能力的持续迭代升级。\n我们部署的Llama2-Chinese-7b-Chat模型可以在huggingface找到。\n需要注意https://huggingface.co在国内无法打开，需要科学上网。\nDocker文件 我们的部署案例使用的Dockerfile文件在Fork项目里，点击这里直接查看。\n将项目clone到你本地查看Dockerfile。\n~ git clone https://github.com/kongh/Llama2-Chinese.git ~ git checkout kh 使用Aliyun部署模型 整个部署大概耗时1个小时，所以，费用一般就20元左右。\n购买机器 在这里我们选择阿里云的GPU服务器, 优先选择配置GPU: 24G的服务器。\n选购机器 镜像和存储 网络和登录凭证 启动模型 登录服务器 ~ ssh root@your server ip 查看GPU驱动 ~ nvidia-smi 安装docker 你可以直接参考https://docs.docker.com/engine/install/ubuntu/安装, 也可以直接使用如下命令。\n# Add Docker\u0026#39;s official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg # Add the repository to Apt sources: echo \\ \u0026#34;deb [arch=\u0026#34;$(dpkg --print-architecture)\u0026#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ \u0026#34;$(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;)\u0026#34; stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update # Install docker sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin # Verify docker info 构建镜像 由于模型约10G，大约需要40分钟才能构建完成，请耐心等待。\n# 创建目录 ~ mkdir ai \u0026amp;\u0026amp; cd ai # 克隆项目 ~ git clone https://github.com/kongh/Llama2-Chinese.git # 切换分支 ~ git checkout kh # 构建镜像 ~ docker build -f docker/Dockerfile -t flagalpha/llama2-chinese-7b:gradio . 安装NVIDIA Container Toolkit # Configure the repository curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\ \u0026amp;\u0026amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \\ sed \u0026#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g\u0026#39; | \\ sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list \\ \u0026amp;\u0026amp; \\ sudo apt-get update # Install the NVIDIA Container Toolkit packages: sudo apt-get install -y nvidia-container-toolkit # Configure the container runtime by using the nvidia-ctk command: sudo nvidia-ctk runtime configure --runtime=docker # Restart the Docker daemon: sudo systemctl restart docker # Option, restart the server sudo reboot 参考链接：https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html\n启动/停止/删除容器 # 启动容器 docker run -d --name llama2 --gpus all -p 7860:7860 flagalpha/llama2-chinese-7b:gradio # 查看日志 docker logs llama2 -f # 停止容器 docker stop llama2 # 删除容器 docker rm llama2 配置安全组，开放端口7860 试用Llama2 http://yourserverip:7860 哈哈哈，开始畅快的玩耍吧！！！\n释放服务器 没有办法因为穷！！！\n在服务器列表，点击停止按钮停止服务器，最后点击释放设置彻底释放服务器。\n","permalink":"https://kongh.github.io/blog/posts/ml/ml-deploy-llama2/","summary":"人工智能|从部署开源模型Llama2认识机器学习 引言 Llama2是Meta AI开源的大模型。截止目前，它算是比较好的开源大模型。\n但是，从部署的效果来看，比ChatGPT的推理能力、写作能力还有一些小差距。\n部署后的试用效果：\n以上只是我个人短暂试用的结果, 你可以在完成部署后使用自己的测试会话来测试Llama2。\nLlama2 Chinese 模型介绍 Llama中文社区是一个专注于Llama模型在中文方面的优化和上层建设的高级技术社区。 基于大规模中文数据，从预训练开始对Llama2模型进行中文能力的持续迭代升级。\n我们部署的Llama2-Chinese-7b-Chat模型可以在huggingface找到。\n需要注意https://huggingface.co在国内无法打开，需要科学上网。\nDocker文件 我们的部署案例使用的Dockerfile文件在Fork项目里，点击这里直接查看。\n将项目clone到你本地查看Dockerfile。\n~ git clone https://github.com/kongh/Llama2-Chinese.git ~ git checkout kh 使用Aliyun部署模型 整个部署大概耗时1个小时，所以，费用一般就20元左右。\n购买机器 在这里我们选择阿里云的GPU服务器, 优先选择配置GPU: 24G的服务器。\n选购机器 镜像和存储 网络和登录凭证 启动模型 登录服务器 ~ ssh root@your server ip 查看GPU驱动 ~ nvidia-smi 安装docker 你可以直接参考https://docs.docker.com/engine/install/ubuntu/安装, 也可以直接使用如下命令。\n# Add Docker\u0026#39;s official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.","title":"人工智能|从部署开源模型Llama2认识机器学习"},{"content":"人工智能|机器学习开篇——从大模型开始认识机器学习 引言 在当今数字化时代，人工智能（AI）和机器学习（ML）已经成为科技领域的焦点。它们正在改变着我们的生活方式、商业模式和社会互动方式，无论是在自动驾驶汽车中的应用，还是在智能手机上的语音助手中，都可以看到AI和ML的身影。然而，要理解这些复杂的技术，首先需要从基础开始，了解它们的核心原理。\n本文的主题是“从大模型开始认识机器学习”，我们将从一个引人注目的大型模型ChatGPT开始，逐步深入了解机器学习的基本概念。ChatGPT不仅代表了AI领域的最新成就，还将帮助我们更好地理解机器学习的核心原理和应用。\n在本文中，我们将首先介绍ChatGPT，这是一个令人兴奋的自然语言处理模型，它具有出色的文本生成和理解能力。然后，我们将探讨机器学习的基础知识，包括数据驱动的决策、模型和算法。最后，我们将深入研究ChatGPT的机器学习实践，了解它是如何被训练和应用的。\n通过本文的阅读，我们希望读者能够更好地理解AI和机器学习的核心概念，以及它们如何塑造着我们的未来。无论您是一名学生、一名工程师还是一个对技术充满好奇心的个体，这篇文章都将为您提供有关AI和机器学习的入门知识，以便您更深入地探索这个令人激动的领域。让我们开始这次探索之旅吧！\n第一部分：ChatGPT 与大型模型 1.1 ChatGPT 的简介 ChatGPT是当今人工智能领域最引人注目的成就之一，代表了自然语言处理（NLP）领域中的最新进展。它不仅能够理解和生成自然语言文本，还可以进行复杂的对话和文本生成任务。让我们首先来了解一下ChatGPT的一些关键特点。\nChatGPT的起源 ChatGPT由OpenAI团队开发，是GPT（生成对抗网络）系列模型的最新成员。OpenAI是一个在人工智能和机器学习研究方面备受瞩目的组织，他们的目标是推动AI技术的前沿。ChatGPT的出现源于对自然语言处理能力的不断追求，以实现更加智能的对话系统。\nChatGPT的规模 一个引人注目的特点是ChatGPT的规模。这个模型拥有数十亿个参数，远超过了以前的NLP模型。这种规模意味着ChatGPT可以处理巨大的语料库，从中学习到更复杂和精细的语言模式。这也是为什么ChatGPT能够表现出出色的文本生成和理解能力的重要原因。\nChatGPT的应用领域 ChatGPT的强大功能使其在各种应用领域都能发挥作用。它可以用于自动化客服，为网站和应用提供智能聊天支持。此外，ChatGPT还可用于虚拟助手，如语音助手、智能家居设备等，使用户能够通过自然语言与计算机进行互动。在教育、医疗保健和研究领域，ChatGPT还可以帮助分析文本、生成报告以及进行自动化文档处理。\n1.2 大型模型的背后 ChatGPT之所以如此强大，背后有着复杂的技术原理和构成要素。让我们深入探讨大型模型的内部机制和背后的科学原理。\n深度学习基础 深度学习是实现ChatGPT等大型模型的核心技术。它是一种模仿人脑神经元工作方式的计算方法，通过神经网络实现对复杂数据的建模。在ChatGPT中，深度学习的神经网络由多个层次组成，每一层都可以捕获不同级别的语言特征。这种分层结构使得ChatGPT能够理解和生成自然语言文本。\n自然语言处理 自然语言处理（NLP）是ChatGPT的基础。NLP是一门研究如何使计算机理解和处理人类语言的学科。在ChatGPT中，NLP技术使模型能够分析文本，提取关键信息，并生成与人类语言相似的回复。NLP的进步对ChatGPT等大型模型的性能至关重要。\n大型模型的挑战 尽管大型模型如ChatGPT具有强大的能力，但它们也面临一些挑战。训练和部署这些模型需要大量的计算资源，这对于许多组织来说可能是一项昂贵的投资。此外，大型模型容易受到数据偏差和模型偏差的影响，需要采取额外的措施来减轻这些问题。\n在本部分中，我们深入了解了ChatGPT及其背后的技术原理。下一步，我们将探讨机器学习的基础概念，以帮助读者更好地理解ChatGPT的训练和应用。\n第二部分：机器学习的基础概念 2.1 什么是机器学习？ 机器学习是实现人工智能的关键技术之一，它让计算机能够从数据中学习并提高性能，而无需显式编程。这一部分将深入探讨机器学习的核心概念和不同类型。\n机器学习的定义 机器学习可以被定义为一种让计算机系统通过数据学习并改进性能的方法。与传统编程不同，机器学习系统不需要显式地编写规则，而是从数据中自动提取规律和模式。\n机器学习的分类 机器学习可以分为几种不同的类型，每种类型都用于解决不同类型的问题。其中包括：\n监督学习：在监督学习中，模型通过带有标签的训练数据进行学习，以预测未知数据的标签。这种方法常用于分类和回归任务，如垃圾邮件检测和房价预测。\n无监督学习：无监督学习不依赖于标签，模型试图发现数据中的模式和结构。这种方法用于聚类、降维和异常检测等任务。\n强化学习：强化学习涉及到一个智能体与环境互动，通过尝试不同的行动来最大化累积奖励。这种方法在自动驾驶、游戏玩法和机器人控制等领域具有广泛应用。\n了解不同类型的机器学习有助于我们选择适合特定问题的方法，并了解如何构建和训练相应的模型。\n2.2 数据驱动的决策 在机器学习中，数据是至关重要的资源。理解数据是如何驱动决策和模型训练的，对于深入了解机器学习至关重要。\n数据的重要性 数据在机器学习中扮演着核心角色，模型的性能很大程度上取决于数据的质量和数量。大量、多样化的数据可以帮助模型更好地泛化到新的情况，但低质量或不平衡的数据可能导致模型性能下降。\n数据类型 数据可以是多种类型，包括：\n结构化数据：通常以表格形式呈现，如数据库中的数据。这类数据适合用于监督学习任务，如分类和回归。\n非结构化数据：非结构化数据包括文本、图像、声音等，通常需要特殊的处理和分析技术。它们在自然语言处理、计算机视觉和音频处理等领域中发挥重要作用。\n了解数据的类型和如何处理它们对于选择合适的机器学习方法和模型至关重要。\n2.3 模型和算法 机器学习模型是实现任务的工具，而算法是让模型学习的方式。在这一部分，我们将讨论机器学习中常用的模型和算法。\n机器学习模型 机器学习模型是一种数学表示，它们用于捕获数据中的模式和关系。一些常见的机器学习模型包括：\n线性回归：用于处理回归问题，尝试拟合一条直线来预测连续值的输出。\n决策树：用于分类和回归问题，通过树状结构进行决策。\n神经网络：模仿人脑神经元工作方式的模型，用于处理复杂的非线性问题。\n机器学习算法 机器学习算法是让模型从数据中学习的方法。一些常见的机器学习算法包括：\n梯度下降：一种用于训练模型的优化算法，通过调整模型参数以最小化损失函数。\n随机森林：一种集成学习方法，通过组合多个决策树来提高模型性能。\nK均值聚类：一种用于无监督学习的聚类算法，将数据点分组成簇。\n了解不同的机器学习模型和算法，以及它们的应用场景，将有助于选择适合特定任务的方法。\n在本部分中，我们深入了解了机器学习的基本概念，包括不同类型的机器学习、数据的重要性以及常见的模型和算法。接下来，我们将深入研究ChatGPT的机器学习实践，以更好地理解这些概念如何应用于现实世界中的大型模型。\n第三部分：ChatGPT 的机器学习实践 3.1 ChatGPT 的训练 了解ChatGPT是如何被训练的，将有助于我们更好地理解它为什么具备出色的自然语言处理能力。以下是ChatGPT的训练过程的关键要点。\n训练数据集 ChatGPT的训练依赖于大量的文本数据。这些数据通常来自互联网，包括网站、社交媒体、新闻文章等。通过分析这些文本数据，ChatGPT可以学习到各种语言模式、词汇和语法结构。\n模型架构 ChatGPT的模型架构是基于深度学习神经网络的。它采用了Transformer架构，这是一种在NLP领域广泛应用的网络结构。Transformer模型具有多层自注意力机制，使其能够捕获文本中的长距离依赖关系和上下文信息。ChatGPT之所以如此出色，很大程度上归功于这一强大的模型架构。\n超参数调整 训练ChatGPT时，需要调整许多超参数，包括学习率、批处理大小、训练周期等。这些超参数的选择对于训练过程和最终模型性能至关重要。精心调整这些参数可以使ChatGPT更好地适应不同的任务和数据。\nChatGPT的训练是一项复杂而计算密集的任务，通常需要大规模的计算资源。OpenAI团队使用了分布式计算集群来训练ChatGPT，这包括数百个GPU和大量的处理器。这个庞大的计算基础为模型的训练提供了必要的计算能力。\n3.2 ChatGPT 的应用 ChatGPT作为一个强大的自然语言处理模型，具有广泛的应用领域。以下是ChatGPT在实际应用中的一些角色。\n智能对话 ChatGPT被广泛应用于虚拟助手、在线客服和聊天机器人中。它可以理解用户的自然语言输入，并生成有意义的回应。这使得用户能够与计算机系统进行自然而流畅的对话，从寻找信息到解决问题，都能得到帮助。\n内容生成 ChatGPT在文本生成方面表现出色，可以用于自动写作、文章摘要和创意内容生成。它可以协助作家、编辑和内容创作者，快速生成文章或报告的草稿，从而提高工作效率。\n信息提取 ChatGPT不仅能够生成文本，还可以从大量文本中提取有用的信息。它可以用于文本摘要，将长篇文章精炼成简洁的摘要，以节省读者的时间。此外，ChatGPT还可以用于情感分析，自动分析文本中的情感倾向，用于舆情监测和用户反馈分析。\n总之，ChatGPT的机器学习实践涵盖了广泛的应用领域，从自然语言处理到内容生成和信息提取。它的强大能力使得它成为解决各种语言相关任务的有力工具。\n通过深入了解ChatGPT的训练和应用，读者可以更全面地认识大型模型在解决实际问题中的价值，以及如何将机器学习技术应用于不同领域的具体案例。接下来，我们将总结本文的主要内容，并提供深入学习的资源，以便读者进一步探索机器学习和人工智能的世界。\n","permalink":"https://kongh.github.io/blog/posts/ml/ml-from-big-model/","summary":"人工智能|机器学习开篇——从大模型开始认识机器学习 引言 在当今数字化时代，人工智能（AI）和机器学习（ML）已经成为科技领域的焦点。它们正在改变着我们的生活方式、商业模式和社会互动方式，无论是在自动驾驶汽车中的应用，还是在智能手机上的语音助手中，都可以看到AI和ML的身影。然而，要理解这些复杂的技术，首先需要从基础开始，了解它们的核心原理。\n本文的主题是“从大模型开始认识机器学习”，我们将从一个引人注目的大型模型ChatGPT开始，逐步深入了解机器学习的基本概念。ChatGPT不仅代表了AI领域的最新成就，还将帮助我们更好地理解机器学习的核心原理和应用。\n在本文中，我们将首先介绍ChatGPT，这是一个令人兴奋的自然语言处理模型，它具有出色的文本生成和理解能力。然后，我们将探讨机器学习的基础知识，包括数据驱动的决策、模型和算法。最后，我们将深入研究ChatGPT的机器学习实践，了解它是如何被训练和应用的。\n通过本文的阅读，我们希望读者能够更好地理解AI和机器学习的核心概念，以及它们如何塑造着我们的未来。无论您是一名学生、一名工程师还是一个对技术充满好奇心的个体，这篇文章都将为您提供有关AI和机器学习的入门知识，以便您更深入地探索这个令人激动的领域。让我们开始这次探索之旅吧！\n第一部分：ChatGPT 与大型模型 1.1 ChatGPT 的简介 ChatGPT是当今人工智能领域最引人注目的成就之一，代表了自然语言处理（NLP）领域中的最新进展。它不仅能够理解和生成自然语言文本，还可以进行复杂的对话和文本生成任务。让我们首先来了解一下ChatGPT的一些关键特点。\nChatGPT的起源 ChatGPT由OpenAI团队开发，是GPT（生成对抗网络）系列模型的最新成员。OpenAI是一个在人工智能和机器学习研究方面备受瞩目的组织，他们的目标是推动AI技术的前沿。ChatGPT的出现源于对自然语言处理能力的不断追求，以实现更加智能的对话系统。\nChatGPT的规模 一个引人注目的特点是ChatGPT的规模。这个模型拥有数十亿个参数，远超过了以前的NLP模型。这种规模意味着ChatGPT可以处理巨大的语料库，从中学习到更复杂和精细的语言模式。这也是为什么ChatGPT能够表现出出色的文本生成和理解能力的重要原因。\nChatGPT的应用领域 ChatGPT的强大功能使其在各种应用领域都能发挥作用。它可以用于自动化客服，为网站和应用提供智能聊天支持。此外，ChatGPT还可用于虚拟助手，如语音助手、智能家居设备等，使用户能够通过自然语言与计算机进行互动。在教育、医疗保健和研究领域，ChatGPT还可以帮助分析文本、生成报告以及进行自动化文档处理。\n1.2 大型模型的背后 ChatGPT之所以如此强大，背后有着复杂的技术原理和构成要素。让我们深入探讨大型模型的内部机制和背后的科学原理。\n深度学习基础 深度学习是实现ChatGPT等大型模型的核心技术。它是一种模仿人脑神经元工作方式的计算方法，通过神经网络实现对复杂数据的建模。在ChatGPT中，深度学习的神经网络由多个层次组成，每一层都可以捕获不同级别的语言特征。这种分层结构使得ChatGPT能够理解和生成自然语言文本。\n自然语言处理 自然语言处理（NLP）是ChatGPT的基础。NLP是一门研究如何使计算机理解和处理人类语言的学科。在ChatGPT中，NLP技术使模型能够分析文本，提取关键信息，并生成与人类语言相似的回复。NLP的进步对ChatGPT等大型模型的性能至关重要。\n大型模型的挑战 尽管大型模型如ChatGPT具有强大的能力，但它们也面临一些挑战。训练和部署这些模型需要大量的计算资源，这对于许多组织来说可能是一项昂贵的投资。此外，大型模型容易受到数据偏差和模型偏差的影响，需要采取额外的措施来减轻这些问题。\n在本部分中，我们深入了解了ChatGPT及其背后的技术原理。下一步，我们将探讨机器学习的基础概念，以帮助读者更好地理解ChatGPT的训练和应用。\n第二部分：机器学习的基础概念 2.1 什么是机器学习？ 机器学习是实现人工智能的关键技术之一，它让计算机能够从数据中学习并提高性能，而无需显式编程。这一部分将深入探讨机器学习的核心概念和不同类型。\n机器学习的定义 机器学习可以被定义为一种让计算机系统通过数据学习并改进性能的方法。与传统编程不同，机器学习系统不需要显式地编写规则，而是从数据中自动提取规律和模式。\n机器学习的分类 机器学习可以分为几种不同的类型，每种类型都用于解决不同类型的问题。其中包括：\n监督学习：在监督学习中，模型通过带有标签的训练数据进行学习，以预测未知数据的标签。这种方法常用于分类和回归任务，如垃圾邮件检测和房价预测。\n无监督学习：无监督学习不依赖于标签，模型试图发现数据中的模式和结构。这种方法用于聚类、降维和异常检测等任务。\n强化学习：强化学习涉及到一个智能体与环境互动，通过尝试不同的行动来最大化累积奖励。这种方法在自动驾驶、游戏玩法和机器人控制等领域具有广泛应用。\n了解不同类型的机器学习有助于我们选择适合特定问题的方法，并了解如何构建和训练相应的模型。\n2.2 数据驱动的决策 在机器学习中，数据是至关重要的资源。理解数据是如何驱动决策和模型训练的，对于深入了解机器学习至关重要。\n数据的重要性 数据在机器学习中扮演着核心角色，模型的性能很大程度上取决于数据的质量和数量。大量、多样化的数据可以帮助模型更好地泛化到新的情况，但低质量或不平衡的数据可能导致模型性能下降。\n数据类型 数据可以是多种类型，包括：\n结构化数据：通常以表格形式呈现，如数据库中的数据。这类数据适合用于监督学习任务，如分类和回归。\n非结构化数据：非结构化数据包括文本、图像、声音等，通常需要特殊的处理和分析技术。它们在自然语言处理、计算机视觉和音频处理等领域中发挥重要作用。\n了解数据的类型和如何处理它们对于选择合适的机器学习方法和模型至关重要。\n2.3 模型和算法 机器学习模型是实现任务的工具，而算法是让模型学习的方式。在这一部分，我们将讨论机器学习中常用的模型和算法。\n机器学习模型 机器学习模型是一种数学表示，它们用于捕获数据中的模式和关系。一些常见的机器学习模型包括：\n线性回归：用于处理回归问题，尝试拟合一条直线来预测连续值的输出。\n决策树：用于分类和回归问题，通过树状结构进行决策。\n神经网络：模仿人脑神经元工作方式的模型，用于处理复杂的非线性问题。\n机器学习算法 机器学习算法是让模型从数据中学习的方法。一些常见的机器学习算法包括：\n梯度下降：一种用于训练模型的优化算法，通过调整模型参数以最小化损失函数。\n随机森林：一种集成学习方法，通过组合多个决策树来提高模型性能。\nK均值聚类：一种用于无监督学习的聚类算法，将数据点分组成簇。\n了解不同的机器学习模型和算法，以及它们的应用场景，将有助于选择适合特定任务的方法。\n在本部分中，我们深入了解了机器学习的基本概念，包括不同类型的机器学习、数据的重要性以及常见的模型和算法。接下来，我们将深入研究ChatGPT的机器学习实践，以更好地理解这些概念如何应用于现实世界中的大型模型。\n第三部分：ChatGPT 的机器学习实践 3.1 ChatGPT 的训练 了解ChatGPT是如何被训练的，将有助于我们更好地理解它为什么具备出色的自然语言处理能力。以下是ChatGPT的训练过程的关键要点。","title":"人工智能|机器学习开篇——从大模型开始认识机器学习"},{"content":"baseURL = \u0026#34;https://example.com\u0026#34; # theme # 主题 theme = \u0026#34;LoveIt\u0026#34; # themes directory # 主题目录 themesDir = \u0026#34;../..\u0026#34; # website title # 网站标题 title = \u0026#34;LoveIt\u0026#34; # determines default content language [\u0026#34;en\u0026#34;, \u0026#34;zh-cn\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] # 设置默认的语言 [\u0026#34;en\u0026#34;, \u0026#34;zh-cn\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] defaultContentLanguage = \u0026#34;en\u0026#34; # language code [\u0026#34;en\u0026#34;, \u0026#34;zh-CN\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] # 网站语言, 仅在这里 CN 大写 [\u0026#34;en\u0026#34;, \u0026#34;zh-CN\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] languageCode = \u0026#34;en\u0026#34; # language name [\u0026#34;English\u0026#34;, \u0026#34;简体中文\u0026#34;, \u0026#34;Français\u0026#34;, \u0026#34;Polski\u0026#34;, ...] # 语言名称 [\u0026#34;English\u0026#34;, \u0026#34;简体中文\u0026#34;, \u0026#34;Français\u0026#34;, \u0026#34;Polski\u0026#34;, ...] languageName = \u0026#34;English\u0026#34; # whether to include Chinese/Japanese/Korean # 是否包括中日韩文字 hasCJKLanguage = false # default amount of posts in each pages # 默认每页列表显示的文章数目 paginate = 12 # google analytics code [UA-XXXXXXXX-X] # 谷歌分析代号 [UA-XXXXXXXX-X] googleAnalytics = \u0026#34;\u0026#34; # copyright description used only for seo schema # 版权描述，仅仅用于 SEO copyright = \u0026#34;\u0026#34; # whether to use robots.txt # 是否使用 robots.txt enableRobotsTXT = true # whether to use git commit log # 是否使用 git 信息 enableGitInfo = true # whether to use emoji code # 是否使用 emoji 代码 enableEmoji = true # ignore some build errors # 忽略一些构建错误 ignoreErrors = [\u0026#34;error-remote-getjson\u0026#34;, \u0026#34;error-missing-instagram-accesstoken\u0026#34;] # Author config # 作者配置 [author] name = \u0026#34;xxxx\u0026#34; email = \u0026#34;\u0026#34; link = \u0026#34;\u0026#34; # Menu config # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \u0026#34;posts\u0026#34; # you can add extra information before the name (HTML format is supported), such as icons # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \u0026#34;\u0026#34; # you can add extra information after the name (HTML format is supported), such as icons # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \u0026#34;\u0026#34; name = \u0026#34;Posts\u0026#34; url = \u0026#34;/posts/\u0026#34; # title will be shown when you hover on this menu link # 当您将鼠标悬停在此菜单链接上时, 将显示标题 title = \u0026#34;\u0026#34; [[menu.main]] weight = 2 identifier = \u0026#34;tags\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Tags\u0026#34; url = \u0026#34;/tags/\u0026#34; title = \u0026#34;\u0026#34; [[menu.main]] weight = 3 identifier = \u0026#34;categories\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Categories\u0026#34; url = \u0026#34;/categories/\u0026#34; title = \u0026#34;\u0026#34; [params] # site default theme [\u0026#34;auto\u0026#34;, \u0026#34;light\u0026#34;, \u0026#34;dark\u0026#34;] # 网站默认主题 [\u0026#34;auto\u0026#34;, \u0026#34;light\u0026#34;, \u0026#34;dark\u0026#34;] defaultTheme = \u0026#34;auto\u0026#34; # public git repo url only then enableGitInfo is true # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \u0026#34;https://github.com/dillonzq/LoveIt\u0026#34; # which hash function used for SRI, when empty, no SRI is used # [\u0026#34;sha256\u0026#34;, \u0026#34;sha384\u0026#34;, \u0026#34;sha512\u0026#34;, \u0026#34;md5\u0026#34;] # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\u0026#34;sha256\u0026#34;, \u0026#34;sha384\u0026#34;, \u0026#34;sha512\u0026#34;, \u0026#34;md5\u0026#34;] fingerprint = \u0026#34;\u0026#34; # date format # 日期格式 dateFormat = \u0026#34;2006-01-02\u0026#34; # website title for Open Graph and Twitter Cards # 网站标题, 用于 Open Graph 和 Twitter Cards title = \u0026#34;LoveIt\u0026#34; # website description for RSS, SEO, Open Graph and Twitter Cards # 网站描述, 用于 RSS, SEO, Open Graph 和 Twitter Cards description = \u0026#34;Hugo theme - LoveIt\u0026#34; # website images for Open Graph and Twitter Cards # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\u0026#34;/logo.png\u0026#34;] # Header config # 页面头部导航栏配置 [params.header] # desktop header mode [\u0026#34;fixed\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;] # 桌面端导航栏模式 [\u0026#34;fixed\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;] desktopMode = \u0026#34;fixed\u0026#34; # mobile header mode [\u0026#34;fixed\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;] # 移动端导航栏模式 [\u0026#34;fixed\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;] mobileMode = \u0026#34;auto\u0026#34; # Header title config # 页面头部导航栏标题配置 [params.header.title] # URL of the LOGO # LOGO 的 URL logo = \u0026#34;\u0026#34; # title name # 标题名称 name = \u0026#34;LoveIt\u0026#34; # you can add extra information before the name (HTML format is supported), such as icons # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \u0026#34;\u0026lt;i class=\u0026#39;far fa-kiss-wink-heart fa-fw\u0026#39; aria-hidden=\u0026#39;true\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; # you can add extra information after the name (HTML format is supported), such as icons # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \u0026#34;\u0026#34; # whether to use typeit animation for title name # 是否为标题显示打字机动画 typeit = false # Footer config # 页面底部信息配置 [params.footer] enable = true # Custom content (HTML format is supported) # 自定义内容 (支持 HTML 格式) custom = \u0026#34;\u0026#34; # whether to show Hugo and theme info # 是否显示 Hugo 和主题信息 hugo = true # whether to show copyright info # 是否显示版权信息 copyright = true # whether to show the author # 是否显示作者 author = true # site creation time # 网站创立年份 since = 2019 # ICP info only in China (HTML format is supported) # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \u0026#34;\u0026#34; # license info (HTML format is supported) # 许可协议信息 (支持 HTML 格式) license= \u0026#39;\u0026lt;a rel=\u0026#34;license external nofollow noopener noreffer\u0026#34; href=\u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;CC BY-NC 4.0\u0026lt;/a\u0026gt;\u0026#39; # Section (all posts) page config # Section (所有文章) 页面配置 [params.section] # special amount of posts in each section page # section 页面每页显示文章数量 paginate = 20 # date format (month and day) # 日期格式 (月和日) dateFormat = \u0026#34;01-02\u0026#34; # amount of RSS pages # RSS 文章数目 rss = 10 # List (category or tag) page config # List (目录或标签) 页面配置 [params.list] # special amount of posts in each list page # list 页面每页显示文章数量 paginate = 20 # date format (month and day) # 日期格式 (月和日) dateFormat = \u0026#34;01-02\u0026#34; # amount of RSS pages # RSS 文章数目 rss = 10 # App icon config # 应用图标配置 [params.app] # optional site title override for the app when added to an iOS home screen or Android launcher # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \u0026#34;LoveIt\u0026#34; # whether to omit favicon resource links # 是否隐藏网站图标资源链接 noFavicon = false # modern SVG favicon to use in place of older style .png and .ico files # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \u0026#34;\u0026#34; # Android browser theme color # Android 浏览器主题色 themeColor = \u0026#34;#ffffff\u0026#34; # Safari mask icon color # Safari 图标颜色 iconColor = \u0026#34;#5bbad5\u0026#34; # Windows v8-11 tile color # Windows v8-11 磁贴颜色 tileColor = \u0026#34;#da532c\u0026#34; # Search config # 搜索配置 [params.search] enable = true # type of search engine [\u0026#34;lunr\u0026#34;, \u0026#34;algolia\u0026#34;] # 搜索引擎的类型 [\u0026#34;lunr\u0026#34;, \u0026#34;algolia\u0026#34;] type = \u0026#34;algolia\u0026#34; # max index length of the chunked content # 文章内容最长索引长度 contentLength = 4000 # placeholder of the search bar # 搜索框的占位提示语 placeholder = \u0026#34;\u0026#34; # max number of results length # 最大结果数目 maxResultLength = 10 # snippet length of the result # 结果内容片段长度 snippetLength = 30 # HTML tag name of the highlight part in results # 搜索结果中高亮部分的 HTML 标签 highlightTag = \u0026#34;em\u0026#34; # whether to use the absolute URL based on the baseURL in search index # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \u0026#34;\u0026#34; appID = \u0026#34;\u0026#34; searchKey = \u0026#34;\u0026#34; # Home page config # 主页信息设置 [params.home] # amount of RSS pages # RSS 文章数目 rss = 10 # Home page profile # 主页个人信息 [params.home.profile] enable = true # Gravatar Email for preferred avatar in home page # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \u0026#34;\u0026#34; # URL of avatar shown in home page # 主页显示头像的 URL avatarURL = \u0026#34;/images/avatar.png\u0026#34; # title shown in home page (HTML format is supported) # 主页显示的网站标题 (支持 HTML 格式) title = \u0026#34;\u0026#34; # subtitle shown in home page (HTML format is supported) # 主页显示的网站副标题 (允许 HTML 格式) subtitle = \u0026#34;A Clean, Elegant but Advanced Hugo Theme\u0026#34; # whether to use typeit animation for subtitle # 是否为副标题显示打字机动画 typeit = true # whether to show social links # 是否显示社交账号 social = true # disclaimer (HTML format is supported) # 免责声明 (支持 HTML 格式) disclaimer = \u0026#34;\u0026#34; # Home page posts # 主页文章列表 [params.home.posts] enable = true # special amount of posts in each home posts page # 主页每页显示文章数量 paginate = 6 # Social config in home page # 主页的社交信息设置 [params.social] GitHub = \u0026#34;\u0026#34; Linkedin = \u0026#34;\u0026#34; Twitter = \u0026#34;\u0026#34; Instagram = \u0026#34;\u0026#34; Facebook = \u0026#34;\u0026#34; Telegram = \u0026#34;\u0026#34; Medium = \u0026#34;\u0026#34; Gitlab = \u0026#34;\u0026#34; Youtubelegacy = \u0026#34;\u0026#34; Youtubecustom = \u0026#34;\u0026#34; Youtubechannel = \u0026#34;\u0026#34; Tumblr = \u0026#34;\u0026#34; Quora = \u0026#34;\u0026#34; Keybase = \u0026#34;\u0026#34; Pinterest = \u0026#34;\u0026#34; Reddit = \u0026#34;\u0026#34; Codepen = \u0026#34;\u0026#34; FreeCodeCamp = \u0026#34;\u0026#34; Bitbucket = \u0026#34;\u0026#34; Stackoverflow = \u0026#34;\u0026#34; Weibo = \u0026#34;\u0026#34; Odnoklassniki = \u0026#34;\u0026#34; VK = \u0026#34;\u0026#34; Flickr = \u0026#34;\u0026#34; Xing = \u0026#34;\u0026#34; Snapchat = \u0026#34;\u0026#34; Soundcloud = \u0026#34;\u0026#34; Spotify = \u0026#34;\u0026#34; Bandcamp = \u0026#34;\u0026#34; Paypal = \u0026#34;\u0026#34; Fivehundredpx = \u0026#34;\u0026#34; Mix = \u0026#34;\u0026#34; Goodreads = \u0026#34;\u0026#34; Lastfm = \u0026#34;\u0026#34; Foursquare = \u0026#34;\u0026#34; Hackernews = \u0026#34;\u0026#34; Kickstarter = \u0026#34;\u0026#34; Patreon = \u0026#34;\u0026#34; Steam = \u0026#34;\u0026#34; Twitch = \u0026#34;\u0026#34; Strava = \u0026#34;\u0026#34; Skype = \u0026#34;\u0026#34; Whatsapp = \u0026#34;\u0026#34; Zhihu = \u0026#34;\u0026#34; Douban = \u0026#34;\u0026#34; Angellist = \u0026#34;\u0026#34; Slidershare = \u0026#34;\u0026#34; Jsfiddle = \u0026#34;\u0026#34; Deviantart = \u0026#34;\u0026#34; Behance = \u0026#34;\u0026#34; Dribbble = \u0026#34;\u0026#34; Wordpress = \u0026#34;\u0026#34; Vine = \u0026#34;\u0026#34; Googlescholar = \u0026#34;\u0026#34; Researchgate = \u0026#34;\u0026#34; Mastodon = \u0026#34;\u0026#34; Thingiverse = \u0026#34;\u0026#34; Devto = \u0026#34;\u0026#34; Gitea = \u0026#34;\u0026#34; XMPP = \u0026#34;\u0026#34; Matrix = \u0026#34;\u0026#34; Bilibili = \u0026#34;\u0026#34; Discord = \u0026#34;\u0026#34; DiscordInvite = \u0026#34;\u0026#34; Lichess = \u0026#34;\u0026#34; ORCID = \u0026#34;\u0026#34; Pleroma = \u0026#34;\u0026#34; Kaggle = \u0026#34;\u0026#34; MediaWiki= \u0026#34;\u0026#34; Plume = \u0026#34;\u0026#34; HackTheBox = \u0026#34;\u0026#34; RootMe= \u0026#34;\u0026#34; Email = \u0026#34;\u0026#34; RSS = \u0026#34;\u0026#34; # Page global config # 文章页面全局配置 [params.page] # whether to hide a page from home page # 是否在主页隐藏一篇文章 hiddenFromHomePage = false # whether to hide a page from search results # 是否在搜索结果中隐藏一篇文章 hiddenFromSearch = false # whether to enable twemoji # 是否使用 twemoji twemoji = false # whether to enable lightgallery # 是否使用 lightgallery lightgallery = false # whether to enable the ruby extended syntax # 是否使用 ruby 扩展语法 ruby = true # whether to enable the fraction extended syntax # 是否使用 fraction 扩展语法 fraction = true # whether to enable the fontawesome extended syntax # 是否使用 fontawesome 扩展语法 fontawesome = true # whether to show link to Raw Markdown content of the content # 是否显示原始 Markdown 文档内容的链接 linkToMarkdown = true # whether to show the full text content in RSS # 是否在 RSS 中显示全文内容 rssFullText = false # Table of the contents config # 目录配置 [params.page.toc] # whether to enable the table of the contents # 是否使用目录 enable = true # whether to keep the static table of the contents in front of the post # 是否保持使用文章前面的静态目录 keepStatic = false # whether to make the table of the contents in the sidebar automatically collapsed # 是否使侧边目录自动折叠展开 auto = true # Code config # 代码配置 [params.page.code] # whether to show the copy button of the code block # 是否显示代码块的复制按钮 copy = true # the maximum number of lines of displayed code by default # 默认展开显示的代码行数 maxShownLines = 50 # KaTeX mathematical formulas config (KaTeX https://katex.org/) # KaTeX 数学公式配置 (KaTeX https://katex.org/) [params.page.math] enable = false # default inline delimiter is $ ... $ and \\( ... \\) # 默认行内定界符是 $ ... $ 和 \\( ... \\) inlineLeftDelimiter = \u0026#34;\u0026#34; inlineRightDelimiter = \u0026#34;\u0026#34; # default block delimiter is $$ ... $$, \\[ ... \\], \\begin{equation} ... \\end{equation} and some other functions # 默认块定界符是 $$ ... $$, \\[ ... \\], \\begin{equation} ... \\end{equation} 和一些其它的函数 blockLeftDelimiter = \u0026#34;\u0026#34; blockRightDelimiter = \u0026#34;\u0026#34; # KaTeX extension copy_tex # KaTeX 插件 copy_tex copyTex = true # KaTeX extension mhchem # KaTeX 插件 mhchem mhchem = true # Mapbox GL JS config (Mapbox GL JS https://docs.mapbox.com/mapbox-gl-js) # Mapbox GL JS 配置 (Mapbox GL JS https://docs.mapbox.com/mapbox-gl-js) [params.page.mapbox] # access token of Mapbox GL JS # Mapbox GL JS 的 access token accessToken = \u0026#34;pk.eyJ1IjoiZGlsbG9uenEiLCJhIjoiY2s2czd2M2x3MDA0NjNmcGxmcjVrZmc2cyJ9.aSjv2BNuZUfARvxRYjSVZQ\u0026#34; # style for the light theme # 浅色主题的地图样式 lightStyle = \u0026#34;mapbox://styles/mapbox/light-v10?optimize=true\u0026#34; # style for the dark theme # 深色主题的地图样式 darkStyle = \u0026#34;mapbox://styles/mapbox/dark-v10?optimize=true\u0026#34; # whether to add NavigationControl (https://docs.mapbox.com/mapbox-gl-js/api/#navigationcontrol) # 是否添加 NavigationControl (https://docs.mapbox.com/mapbox-gl-js/api/#navigationcontrol) navigation = true # whether to add GeolocateControl (https://docs.mapbox.com/mapbox-gl-js/api/#geolocatecontrol) # 是否添加 GeolocateControl (https://docs.mapbox.com/mapbox-gl-js/api/#geolocatecontrol) geolocate = true # whether to add ScaleControl (https://docs.mapbox.com/mapbox-gl-js/api/#scalecontrol) # 是否添加 ScaleControl (https://docs.mapbox.com/mapbox-gl-js/api/#scalecontrol) scale = true # whether to add FullscreenControl (https://docs.mapbox.com/mapbox-gl-js/api/#fullscreencontrol) # 是否添加 FullscreenControl (https://docs.mapbox.com/mapbox-gl-js/api/#fullscreencontrol) fullscreen = true # Social share links in post page # 文章页面的分享信息设置 [params.page.share] enable = true Twitter = true Facebook = true Linkedin = false Whatsapp = false Pinterest = false Tumblr = false HackerNews = true Reddit = false VK = false Buffer = false Xing = false Line = true Instapaper = false Pocket = false Flipboard = false Weibo = true Blogger = false Baidu = false Odnoklassniki = false Evernote = false Skype = false Trello = false Mix = false # Comment config # 评论系统设置 [params.page.comment] enable = true # Disqus comment config (https://disqus.com/) # Disqus 评论系统设置 (https://disqus.com/) [params.page.comment.disqus] enable = false # Disqus shortname to use Disqus in posts # Disqus 的 shortname，用来在文章中启用 Disqus 评论系统 shortname = \u0026#34;\u0026#34; # Gitalk comment config (https://github.com/gitalk/gitalk) # Gitalk 评论系统设置 (https://github.com/gitalk/gitalk) [params.page.comment.gitalk] enable = false owner = \u0026#34;\u0026#34; repo = \u0026#34;\u0026#34; clientId = \u0026#34;\u0026#34; clientSecret = \u0026#34;\u0026#34; # Valine comment config (https://github.com/xCss/Valine) # Valine 评论系统设置 (https://github.com/xCss/Valine) [params.page.comment.valine] enable = true appId = \u0026#34;QGzwQXOqs5JOhN4RGPOkR2mR-MdYXbMMI\u0026#34; appKey = \u0026#34;WBmoGyJtbqUswvfLh6L8iEBr\u0026#34; placeholder = \u0026#34;\u0026#34; avatar = \u0026#34;mp\u0026#34; meta= \u0026#34;\u0026#34; pageSize = 10 # automatically adapt the current theme i18n configuration when empty # 为空时自动适配当前主题 i18n 配置 lang = \u0026#34;\u0026#34; visitor = true recordIP = true highlight = true enableQQ = false serverURLs = \u0026#34;https://leancloud.hugoloveit.com\u0026#34; # emoji data file name, default is \u0026#34;google.yml\u0026#34; # [\u0026#34;apple.yml\u0026#34;, \u0026#34;google.yml\u0026#34;, \u0026#34;facebook.yml\u0026#34;, \u0026#34;twitter.yml\u0026#34;] # located in \u0026#34;themes/LoveIt/assets/lib/valine/emoji/\u0026#34; directory # you can store your own data files in the same path under your project: # \u0026#34;assets/lib/valine/emoji/\u0026#34; # emoji 数据文件名称, 默认是 \u0026#34;google.yml\u0026#34; # [\u0026#34;apple.yml\u0026#34;, \u0026#34;google.yml\u0026#34;, \u0026#34;facebook.yml\u0026#34;, \u0026#34;twitter.yml\u0026#34;] # 位于 \u0026#34;themes/LoveIt/assets/lib/valine/emoji/\u0026#34; 目录 # 可以在你的项目下相同路径存放你自己的数据文件: # \u0026#34;assets/lib/valine/emoji/\u0026#34; emoji = \u0026#34;\u0026#34; # Facebook comment config (https://developers.facebook.com/docs/plugins/comments) # Facebook 评论系统设置 (https://developers.facebook.com/docs/plugins/comments) [params.page.comment.facebook] enable = false width = \u0026#34;100%\u0026#34; numPosts = 10 appId = \u0026#34;\u0026#34; # automatically adapt the current theme i18n configuration when empty # 为空时自动适配当前主题 i18n 配置 languageCode = \u0026#34;\u0026#34; # Telegram comments config (https://comments.app/) # Telegram comments 评论系统设置 (https://comments.app/) [params.page.comment.telegram] enable = false siteID = \u0026#34;\u0026#34; limit = 5 height = \u0026#34;\u0026#34; color = \u0026#34;\u0026#34; colorful = true dislikes = false outlined = false # Commento comment config (https://commento.io/) # Commento comment 评论系统设置 (https://commento.io/) [params.page.comment.commento] enable = false # utterances comment config (https://utteranc.es/) # utterances comment 评论系统设置 (https://utteranc.es/) [params.page.comment.utterances] enable = false # owner/repo repo = \u0026#34;\u0026#34; issueTerm = \u0026#34;pathname\u0026#34; label = \u0026#34;\u0026#34; lightTheme = \u0026#34;github-light\u0026#34; darkTheme = \u0026#34;github-dark\u0026#34; # giscus comment config (https://giscus.app/) # giscus comment 评论系统设置 (https://giscus.app/zh-CN) [params.page.comment.giscus] # You can refer to the official documentation of giscus to use the following configuration. # 你可以参考官方文档来使用下列配置 enable = false repo = \u0026#34;\u0026#34; repoId = \u0026#34;\u0026#34; category = \u0026#34;Announcements\u0026#34; categoryId = \u0026#34;\u0026#34; # automatically adapt the current theme i18n configuration when empty # 为空时自动适配当前主题 i18n 配置 lang = \u0026#34;\u0026#34; mapping = \u0026#34;pathname\u0026#34; reactionsEnabled = \u0026#34;1\u0026#34; emitMetadata = \u0026#34;0\u0026#34; inputPosition = \u0026#34;bottom\u0026#34; lazyLoading = false lightTheme = \u0026#34;light\u0026#34; darkTheme = \u0026#34;dark\u0026#34; # Third-party library config # 第三方库配置 [params.page.library] [params.page.library.css] # someCSS = \u0026#34;some.css\u0026#34; # located in \u0026#34;assets/\u0026#34; 位于 \u0026#34;assets/\u0026#34; # Or 或者 # someCSS = \u0026#34;https://cdn.example.com/some.css\u0026#34; [params.page.library.js] # someJavascript = \u0026#34;some.js\u0026#34; # located in \u0026#34;assets/\u0026#34; 位于 \u0026#34;assets/\u0026#34; # Or 或者 # someJavascript = \u0026#34;https://cdn.example.com/some.js\u0026#34; # Page SEO config # 页面 SEO 配置 [params.page.seo] # image URL # 图片 URL images = [] # Publisher info # 出版者信息 [params.page.seo.publisher] name = \u0026#34;xxxx\u0026#34; logoUrl = \u0026#34;/images/avatar.png\u0026#34; # TypeIt config # TypeIt 配置 [params.typeit] # typing speed between each step (measured in milliseconds) # 每一步的打字速度 (单位是毫秒) speed = 100 # blinking speed of the cursor (measured in milliseconds) # 光标的闪烁速度 (单位是毫秒) cursorSpeed = 1000 # character used for the cursor (HTML format is supported) # 光标的字符 (支持 HTML 格式) cursorChar = \u0026#34;|\u0026#34; # cursor duration after typing finishing (measured in milliseconds, \u0026#34;-1\u0026#34; means unlimited) # 打字结束之后光标的持续时间 (单位是毫秒, \u0026#34;-1\u0026#34; 代表无限大) duration = -1 # Site verification code for Google/Bing/Yandex/Pinterest/Baidu # 网站验证代码，用于 Google/Bing/Yandex/Pinterest/Baidu [params.verification] google = \u0026#34;\u0026#34; bing = \u0026#34;\u0026#34; yandex = \u0026#34;\u0026#34; pinterest = \u0026#34;\u0026#34; baidu = \u0026#34;\u0026#34; # Site SEO config # 网站 SEO 配置 [params.seo] # image URL # 图片 URL image = \u0026#34;/images/Apple-Devices-Preview.png\u0026#34; # thumbnail URL # 缩略图 URL thumbnailUrl = \u0026#34;/images/screenshot.png\u0026#34; # Analytics config # 网站分析配置 [params.analytics] enable = false # Google Analytics [params.analytics.google] id = \u0026#34;\u0026#34; # whether to anonymize IP # 是否匿名化用户 IP anonymizeIP = true # Fathom Analytics [params.analytics.fathom] id = \u0026#34;\u0026#34; # server url for your tracker if you\u0026#39;re self hosting # 自行托管追踪器时的主机路径 server = \u0026#34;\u0026#34; # Plausible Analytics [params.analytics.plausible] dataDomain = \u0026#34;\u0026#34; # Yandex Metrica [params.analytics.yandexMetrica] id = \u0026#34;\u0026#34; # Cookie consent config # Cookie 许可配置 [params.cookieconsent] enable = false # text strings used for Cookie consent banner # 用于 Cookie 许可横幅的文本字符串 [params.cookieconsent.content] message = \u0026#34;\u0026#34; dismiss = \u0026#34;\u0026#34; link = \u0026#34;\u0026#34; # CDN config for third-party library files # 第三方库文件的 CDN 设置 [params.cdn] # CDN data file name, disabled by default # [\u0026#34;jsdelivr.yml\u0026#34;] # located in \u0026#34;themes/LoveIt/assets/data/cdn/\u0026#34; directory # you can store your own data files in the same path under your project: # \u0026#34;assets/data/cdn/\u0026#34; # CDN 数据文件名称, 默认不启用 # [\u0026#34;jsdelivr.yml\u0026#34;] # 位于 \u0026#34;themes/LoveIt/assets/data/cdn/\u0026#34; 目录 # 可以在你的项目下相同路径存放你自己的数据文件: # \u0026#34;assets/data/cdn/\u0026#34; data = \u0026#34;jsdelivr.yml\u0026#34; # Compatibility config # 兼容性设置 [params.compatibility] # whether to use Polyfill.io to be compatible with older browsers # 是否使用 Polyfill.io 来兼容旧式浏览器 polyfill = false # whether to use object-fit-images to be compatible with older browsers # 是否使用 object-fit-images 来兼容旧式浏览器 objectFit = false # Markup related configuration in Hugo # Hugo 解析文档的配置 [markup] # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] codeFences = true guessSyntax = true lineNos = true lineNumbersInTable = true # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158) # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false # Goldmark is from Hugo 0.60 the default library used for Markdown # Goldmark 是 Hugo 0.60 以来的默认 Markdown 解析库 [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true strikethrough = true table = true taskList = true typographer = true [markup.goldmark.renderer] # whether to use HTML tags directly in the document # 是否在文档中直接使用 HTML 标签 unsafe = true # Table Of Contents settings # 目录设置 [markup.tableOfContents] startLevel = 2 endLevel = 6 # Sitemap config # 网站地图配置 [sitemap] changefreq = \u0026#34;weekly\u0026#34; filename = \u0026#34;sitemap.xml\u0026#34; priority = 0.5 # Permalinks config (https://gohugo.io/content-management/urls/#permalinks) # Permalinks 配置 (https://gohugo.io/content-management/urls/#permalinks) [Permalinks] # posts = \u0026#34;:year/:month/:filename\u0026#34; posts = \u0026#34;:filename\u0026#34; # Privacy config (https://gohugo.io/about/hugo-and-gdpr/) # 隐私信息配置 (https://gohugo.io/about/hugo-and-gdpr/) [privacy] # privacy of the Google Analytics (replaced by params.analytics.google) # Google Analytics 相关隐私 (被 params.analytics.google 替代) [privacy.googleAnalytics] # ... [privacy.twitter] enableDNT = true [privacy.youtube] privacyEnhanced = true # Options to make output .md files # 用于输出 Markdown 格式文档的设置 [mediaTypes] [mediaTypes.\u0026#34;text/plain\u0026#34;] suffixes = [\u0026#34;md\u0026#34;] # Options to make output .md files # 用于输出 Markdown 格式文档的设置 [outputFormats.MarkDown] mediaType = \u0026#34;text/plain\u0026#34; isPlainText = true isHTML = false # Options to make hugo output files # 用于 Hugo 输出文档的设置 [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] page = [\u0026#34;HTML\u0026#34;, \u0026#34;MarkDown\u0026#34;] section = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;] taxonomy = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;] taxonomyTerm = [\u0026#34;HTML\u0026#34;] # Multilingual # 多语言 [languages] [languages.en] weight = 1 languageCode = \u0026#34;en\u0026#34; languageName = \u0026#34;English\u0026#34; hasCJKLanguage = false copyright = \u0026#34;This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\u0026#34; [languages.en.menu] [[languages.en.menu.main]] weight = 1 identifier = \u0026#34;posts\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Posts\u0026#34; url = \u0026#34;/posts/\u0026#34; title = \u0026#34;\u0026#34; [[languages.en.menu.main]] weight = 2 identifier = \u0026#34;tags\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Tags\u0026#34; url = \u0026#34;/tags/\u0026#34; title = \u0026#34;\u0026#34; [[languages.en.menu.main]] weight = 3 identifier = \u0026#34;categories\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Categories\u0026#34; url = \u0026#34;/categories/\u0026#34; title = \u0026#34;\u0026#34; [[languages.en.menu.main]] weight = 4 identifier = \u0026#34;documentation\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Docs\u0026#34; url = \u0026#34;/categories/documentation/\u0026#34; title = \u0026#34;\u0026#34; [[languages.en.menu.main]] weight = 5 identifier = \u0026#34;about\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;About\u0026#34; url = \u0026#34;/about/\u0026#34; title = \u0026#34;\u0026#34; [[languages.en.menu.main]] weight = 6 identifier = \u0026#34;github\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;fab fa-github fa-fw\u0026#39; aria-hidden=\u0026#39;true\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;\u0026#34; url = \u0026#34;https://github.com/dillonzq/LoveIt\u0026#34; title = \u0026#34;GitHub\u0026#34; [languages.en.params] [languages.en.params.search] enable = true type = \u0026#34;algolia\u0026#34; contentLength = 4000 placeholder = \u0026#34;\u0026#34; maxResultLength = 10 snippetLength = 30 highlightTag = \u0026#34;em\u0026#34; absoluteURL = false [languages.en.params.search.algolia] index = \u0026#34;index.en\u0026#34; appID = \u0026#34;PASDMWALPK\u0026#34; searchKey = \u0026#34;b42948e51daaa93df92381c8e2ac0f93\u0026#34; [languages.en.params.home] rss = 10 [languages.en.params.home.profile] enable = true gravatarEmail = \u0026#34;\u0026#34; avatarURL = \u0026#34;/images/avatar.png\u0026#34; title = \u0026#34;\u0026#34; subtitle = \u0026#34;A Clean, Elegant but Advanced Hugo Theme\u0026#34; typeit = true social = true disclaimer = \u0026#34;\u0026#34; [languages.en.params.social] GitHub = \u0026#34;xxxx\u0026#34; Twitter = \u0026#34;xxxx\u0026#34; Instagram = \u0026#34;xxxx\u0026#34; Facebook = \u0026#34;xxxx\u0026#34; Telegram = \u0026#34;xxxx\u0026#34; Youtubelegacy = \u0026#34;xxxx\u0026#34; Phone = \u0026#34;555-555-555\u0026#34; Email = \u0026#34;xxxx@xxxx.com\u0026#34; RSS = true [languages.en.params.social.Mastodon] id = \u0026#34;@xxxx\u0026#34; prefix = \u0026#34;https://mastodon.technology/\u0026#34; [languages.zh-cn] weight = 2 languageCode = \u0026#34;zh-CN\u0026#34; languageName = \u0026#34;简体中文\u0026#34; hasCJKLanguage = true copyright = \u0026#34;This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\u0026#34; [languages.zh-cn.menu] [[languages.zh-cn.menu.main]] weight = 1 identifier = \u0026#34;posts\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;所有文章\u0026#34; url = \u0026#34;/posts/\u0026#34; title = \u0026#34;\u0026#34; [[languages.zh-cn.menu.main]] weight = 2 identifier = \u0026#34;tags\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;标签\u0026#34; url = \u0026#34;/tags/\u0026#34; title = \u0026#34;\u0026#34; [[languages.zh-cn.menu.main]] weight = 3 identifier = \u0026#34;categories\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;分类\u0026#34; url = \u0026#34;/categories/\u0026#34; title = \u0026#34;\u0026#34; [[languages.zh-cn.menu.main]] weight = 4 identifier = \u0026#34;documentation\u0026#34; pre = \u0026#34;\u0026#34; name = \u0026#34;文档\u0026#34; url = \u0026#34;/categories/documentation/\u0026#34; title = \u0026#34;\u0026#34; [[languages.zh-cn.menu.main]] weight = 5 identifier = \u0026#34;about\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;关于\u0026#34; url = \u0026#34;/about/\u0026#34; title = \u0026#34;\u0026#34; [[languages.zh-cn.menu.main]] weight = 6 identifier = \u0026#34;github\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;fab fa-github fa-fw\u0026#39; aria-hidden=\u0026#39;true\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;\u0026#34; url = \u0026#34;https://github.com/dillonzq/LoveIt\u0026#34; title = \u0026#34;GitHub\u0026#34; [languages.zh-cn.params] [languages.zh-cn.params.search] enable = true type = \u0026#34;algolia\u0026#34; contentLength = 4000 placeholder = \u0026#34;\u0026#34; maxResultLength = 10 snippetLength = 50 highlightTag = \u0026#34;em\u0026#34; absoluteURL = false [languages.zh-cn.params.search.algolia] index = \u0026#34;index.zh-cn\u0026#34; appID = \u0026#34;PASDMWALPK\u0026#34; searchKey = \u0026#34;b42948e51daaa93df92381c8e2ac0f93\u0026#34; [languages.zh-cn.params.home] rss = 10 [languages.zh-cn.params.home.profile] enable = true gravatarEmail = \u0026#34;\u0026#34; avatarURL = \u0026#34;/images/avatar.png\u0026#34; title = \u0026#34;\u0026#34; subtitle = \u0026#34;一个简洁、优雅且高效的 Hugo 主题\u0026#34; typeit = true social = true disclaimer = \u0026#34;\u0026#34; [languages.zh-cn.params.social] GitHub = \u0026#34;xxxx\u0026#34; Weibo = \u0026#34;xxxx\u0026#34; Steam = \u0026#34;xxxx\u0026#34; Zhihu = \u0026#34;xxxx\u0026#34; Douban = \u0026#34;xxxx\u0026#34; Devto = \u0026#34;xxxx\u0026#34; Bilibili = \u0026#34;xxxx\u0026#34; Email = \u0026#34;xxxx@xxxx.com\u0026#34; Phone = \u0026#34;555-555-555\u0026#34; RSS = true ","permalink":"https://kongh.github.io/blog/posts/hugo-loveit-config/","summary":"baseURL = \u0026#34;https://example.com\u0026#34; # theme # 主题 theme = \u0026#34;LoveIt\u0026#34; # themes directory # 主题目录 themesDir = \u0026#34;../..\u0026#34; # website title # 网站标题 title = \u0026#34;LoveIt\u0026#34; # determines default content language [\u0026#34;en\u0026#34;, \u0026#34;zh-cn\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] # 设置默认的语言 [\u0026#34;en\u0026#34;, \u0026#34;zh-cn\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] defaultContentLanguage = \u0026#34;en\u0026#34; # language code [\u0026#34;en\u0026#34;, \u0026#34;zh-CN\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] # 网站语言, 仅在这里 CN 大写 [\u0026#34;en\u0026#34;, \u0026#34;zh-CN\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] languageCode = \u0026#34;en\u0026#34; # language name [\u0026#34;English\u0026#34;, \u0026#34;简体中文\u0026#34;, \u0026#34;Français\u0026#34;, \u0026#34;Polski\u0026#34;, .","title":"Hugo Loveit 主题example配置文件"},{"content":"使用Hugo搭建个人博客指南 本文假设读者使用MacBook并且已经存在Git工具，若非此前提条件请提前安装对应的工具。\n一、安装Hugo 1.1 安装 ~ brew install hugo 1.2 验证 ~ hugo version 二、创建项目 2.1 创建名为blog的项目 ~ hugo new site blog 2.2 打开项目 本文使用 vscode来编写 Markdown文件，你可以选择任何编辑器来编写。但是，我们推荐你使用 vscode, 同时，这里有一份安装指南提供参考。\n2.3 初始化成git项目 ~ git init ~ git branch -m main ~ git add . ~ git commit -m \u0026#34;init\u0026#34; 2.4 添加主题 ~ git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 2.5 修改配置文件，添加主题 打开 config.toml文件,增加 theme = \u0026quot;LoveIt\u0026quot;配置。\n2.6 创建第一篇文章 ~ hugo new posts/hugo-blog-guide/index.md 2.7 本地启动服务器，查看效果 ~ hugo server -D 使用浏览器打开后，应该会看到如下效果。 三、优化项目 3.1 主题LoveIt的示例项目 在项目下 themes/LoveIt/exampleSite目录是例子的根目录。 首先，我们重点关注下 config.toml。由于篇幅比较大，特意将文件放到了另外一篇文章。点击查看配置示例。\n3.2 调整项目配置 3.2.1 基础配置 拷贝如下内容到 config.yaml文件内，修改成你需要的样子，重启查看效果。\n# 修改为你的发布地址 baseURL = \u0026#34;https://example.com\u0026#34; # theme # 主题 theme = \u0026#34;LoveIt\u0026#34; # website title # 网站标题 title = \u0026#34;Kong Hang\u0026#39;s Blog\u0026#34; # determines default content language [\u0026#34;en\u0026#34;, \u0026#34;zh-cn\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] # 设置默认的语言 [\u0026#34;en\u0026#34;, \u0026#34;zh-cn\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] defaultContentLanguage = \u0026#34;en\u0026#34; # language code [\u0026#34;en\u0026#34;, \u0026#34;zh-CN\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] # 网站语言, 仅在这里 CN 大写 [\u0026#34;en\u0026#34;, \u0026#34;zh-CN\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] languageCode = \u0026#34;en\u0026#34; # language name [\u0026#34;English\u0026#34;, \u0026#34;简体中文\u0026#34;, \u0026#34;Français\u0026#34;, \u0026#34;Polski\u0026#34;, ...] # 语言名称 [\u0026#34;English\u0026#34;, \u0026#34;简体中文\u0026#34;, \u0026#34;Français\u0026#34;, \u0026#34;Polski\u0026#34;, ...] languageName = \u0026#34;English\u0026#34; # whether to include Chinese/Japanese/Korean # 是否包括中日韩文字 hasCJKLanguage = false # default amount of posts in each pages # 默认每页列表显示的文章数目 paginate = 12 # google analytics code [UA-XXXXXXXX-X] # 谷歌分析代号 [UA-XXXXXXXX-X] googleAnalytics = \u0026#34;\u0026#34; # copyright description used only for seo schema # 版权描述，仅仅用于 SEO copyright = \u0026#34;Kong Hang\u0026#39;s Blog\u0026#34; # whether to use robots.txt # 是否使用 robots.txt enableRobotsTXT = true # whether to use git commit log # 是否使用 git 信息 enableGitInfo = true # whether to use emoji code # 是否使用 emoji 代码 enableEmoji = true # ignore some build errors # 忽略一些构建错误 ignoreErrors = [\u0026#34;error-remote-getjson\u0026#34;, \u0026#34;error-missing-instagram-accesstoken\u0026#34;] # Author config # 作者配置 [author] name = \u0026#34;KongHang\u0026#34; email = \u0026#34;563796329@qq.com\u0026#34; link = \u0026#34;https://github.com/kongh\u0026#34; 3.2.2 配置导航栏 # Menu config # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \u0026#34;posts\u0026#34; # you can add extra information before the name (HTML format is supported), such as icons # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \u0026#34;\u0026#34; # you can add extra information after the name (HTML format is supported), such as icons # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \u0026#34;\u0026#34; name = \u0026#34;Posts\u0026#34; url = \u0026#34;/posts/\u0026#34; # title will be shown when you hover on this menu link # 当您将鼠标悬停在此菜单链接上时, 将显示标题 title = \u0026#34;\u0026#34; [[menu.main]] weight = 2 identifier = \u0026#34;tags\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Tags\u0026#34; url = \u0026#34;/tags/\u0026#34; title = \u0026#34;\u0026#34; [[menu.main]] weight = 3 identifier = \u0026#34;categories\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Categories\u0026#34; url = \u0026#34;/categories/\u0026#34; title = \u0026#34;\u0026#34; 3.2.3 配置params [params] # website title for Open Graph and Twitter Cards # 网站标题, 用于 Open Graph 和 Twitter Cards title = \u0026#34;Kong Hang\u0026#39;s Blog\u0026#34; # website description for RSS, SEO, Open Graph and Twitter Cards # 网站描述, 用于 RSS, SEO, Open Graph 和 Twitter Cards description = \u0026#34;Kong Hang\u0026#39;s Blog\u0026#34; # website images for Open Graph and Twitter Cards # 网站图片, 用于 Open Graph 和 Twitter Cards images = [] # Header config # 页面头部导航栏配置 [params.header] # Header title config # 页面头部导航栏标题配置 [params.header.title] # title name # 标题名称 name = \u0026#34;Kong Hang\u0026#39;s Blog\u0026#34; # you can add extra information before the name (HTML format is supported), such as icons # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \u0026#34;\u0026lt;i class=\u0026#39;far fa-kiss-wink-heart fa-fw\u0026#39; aria-hidden=\u0026#39;true\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; # App icon config # 应用图标配置 [params.app] # optional site title override for the app when added to an iOS home screen or Android launcher # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \u0026#34;Kong Hang\u0026#39;s Blog\u0026#34; # Home page config # 主页信息设置 [params.home] # Home page profile # 主页个人信息 [params.home.profile] enable = true # subtitle shown in home page (HTML format is supported) # 主页显示的网站副标题 (允许 HTML 格式) subtitle = \u0026#34;Stay Hungry Stay Foolish!!!\u0026#34; # whether to use typeit animation for subtitle # 是否为副标题显示打字机动画 typeit = true # whether to show social links # 是否显示社交账号 social = true # disclaimer (HTML format is supported) # 免责声明 (支持 HTML 格式) disclaimer = \u0026#34;\u0026#34; # Home page posts # 主页文章列表 [params.home.posts] enable = true # special amount of posts in each home posts page # 主页每页显示文章数量 paginate = 6 四、使用GitHub托管项目 4.1 创建空项目 按如图填写项目名称和描述创建一个空项目。\n4.2 推送至远程仓库 ~ git remote add origin https://github.com/kongh/blog.git ~ git push -u origin main 4.3 发布项目到Github Pages 在项目目录下新增 .github/workflows/gh-pages.yml文件，添加如下内容：\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 然后提交代码后会自动构建出 gh-pages分支，然后，点击 Settings-Code and automation-Pages，修改Github Pages Branch为 gh-pages。\n","permalink":"https://kongh.github.io/blog/posts/hugo-blog-guide/","summary":"使用Hugo搭建个人博客指南 本文假设读者使用MacBook并且已经存在Git工具，若非此前提条件请提前安装对应的工具。\n一、安装Hugo 1.1 安装 ~ brew install hugo 1.2 验证 ~ hugo version 二、创建项目 2.1 创建名为blog的项目 ~ hugo new site blog 2.2 打开项目 本文使用 vscode来编写 Markdown文件，你可以选择任何编辑器来编写。但是，我们推荐你使用 vscode, 同时，这里有一份安装指南提供参考。\n2.3 初始化成git项目 ~ git init ~ git branch -m main ~ git add . ~ git commit -m \u0026#34;init\u0026#34; 2.4 添加主题 ~ git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 2.5 修改配置文件，添加主题 打开 config.toml文件,增加 theme = \u0026quot;LoveIt\u0026quot;配置。\n2.6 创建第一篇文章 ~ hugo new posts/hugo-blog-guide/index.md 2.7 本地启动服务器，查看效果 ~ hugo server -D 使用浏览器打开后，应该会看到如下效果。 三、优化项目 3.","title":"使用Hugo搭建个人博客指南"},{"content":"使用vscode作为markdown编辑器 安装vscode 点击链接安装vscode。\n安装markdown插件 点击侧边栏 Extensions,输入 Office Viewer安装所见即所得 Markdown插件。\n编辑器样例 ","permalink":"https://kongh.github.io/blog/posts/vscode-markdown-editor/","summary":"使用vscode作为markdown编辑器 安装vscode 点击链接安装vscode。\n安装markdown插件 点击侧边栏 Extensions,输入 Office Viewer安装所见即所得 Markdown插件。\n编辑器样例 ","title":"使用vscode作为markdown编辑器"}]